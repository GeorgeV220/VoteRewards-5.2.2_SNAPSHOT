package com.georgev22.voterewards.database;import com.georgev22.voterewards.VoteRewardPlugin;import com.georgev22.voterewards.utilities.OptionsUtil;import com.georgev22.voterewards.utilities.Utils;import com.georgev22.voterewards.utilities.player.User;import com.georgev22.voterewards.utilities.player.UserVoteData;import com.google.common.annotations.Beta;import org.bukkit.configuration.file.YamlConfiguration;import java.io.File;import java.io.IOException;import java.time.Instant;import java.time.ZoneOffset;import java.time.ZonedDateTime;import java.time.format.DateTimeFormatter;import java.util.Map;import java.util.UUID;public class Backup {    private static final VoteRewardPlugin voteRewardPlugin = VoteRewardPlugin.getInstance();    private static File getBackupFolder() {        File backupFolder = new File(voteRewardPlugin.getDataFolder(), "backups");        if (backupFolder.mkdirs()) {            if (OptionsUtil.DEBUG_CREATE.isEnabled()) {                Utils.debug(voteRewardPlugin, "Backup folder has been created!");            }        }        return backupFolder;    }    /**     * @throws IOException Thrown when the given file cannot be written to for any reason.     * @since v4.7.0     */    @Beta    public static void backup() throws IOException {        ZonedDateTime zonedDateTime = Instant.ofEpochMilli(System.currentTimeMillis()).atZone(ZoneOffset.systemDefault().getRules().getOffset(Instant.now()));        File file = new File(getBackupFolder(), "backup" + zonedDateTime.format(DateTimeFormatter.ofPattern("MM-dd-yyyy--h-mm-a")) + ".yml");        YamlConfiguration yamlConfiguration = YamlConfiguration.loadConfiguration(file);        for (Map.Entry<UUID, User> b : UserVoteData.getAllUsersMap().entrySet()) {            yamlConfiguration.set(b.getKey().toString() + ".last-name", b.getValue().getPlayer().getName());            yamlConfiguration.set(b.getKey().toString() + ".uuid", b.getValue().getUniqueID().toString());            yamlConfiguration.set(b.getKey().toString() + ".votes", b.getValue().getVotes());            yamlConfiguration.set(b.getKey().toString() + ".all-time-votes", b.getValue().getAllTimeVotes());            yamlConfiguration.set(b.getKey().toString() + ".daily-votes", b.getValue().getDailyVotes());            yamlConfiguration.set(b.getKey().toString() + ".voteparty", b.getValue().getVoteParties());            yamlConfiguration.set(b.getKey().toString() + ".last-vote", b.getValue().getLastVoted());            yamlConfiguration.set(b.getKey().toString() + ".services", b.getValue().getServices());            yamlConfiguration.set(b.getKey().toString() + ".object", b.getValue().toString());        }        yamlConfiguration.save(file);    }    public static void restore(String fileName) {        File file = new File(getBackupFolder(), fileName);        YamlConfiguration yamlConfiguration = YamlConfiguration.loadConfiguration(file);        /*for (String b : yamlConfiguration.getConfigurationSection("").getKeys(false)) {            //TODO RESTORE        }*/    }}